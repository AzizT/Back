Symfony:
Intro: keskeu Symfony
Etape 1 => installation de symfony 4.3
Etape 2 => Les Bundles
Etape 3 => Les routes et les controllers
Etape 4 => Creer un site boutique avec Symfony
Etape 5 => TWIG (moteur de template)
Etape 6 => Les assets
Etape 7 => Entités
Etape 8 => Doctrine
Etape 9 => Les formulaires
Etape 10 => Validation des données
Etape 11 => Securité et utilisateurs
Etape 12 => Association Mapping
Etape 13 => Installation et boutique sur SF 4.3
Bonus => formulaire de contact

Intro:
**************************************************

- Interet d' un Framework:

    - Une organisation optimisée
    - Fonctionnalités communes a tous les projets
    - Services disponibles (Routing, Securité, BDD, Moteur de Template, Formulaire)
    - Communauté active, grosse bibliotheque pour debuggage

- Choix du Framework

    - Le sien (pédagogique)
    - Framework Fullstack (Symfony, Zend, Laravel, Cake)
    - Les minis framework (Silex, Slim, Codelgniter, Lumen)

- Le framework Symfony

    - Framework français crée par Sensiolabs
    - Différentes versions LTS ( long time support):
          - 2.8
          - 3.4 amélioration de la 2.8, plus souple, avec des Fonctionnalités
          - 4.4 amélioration de la 3.4, mais bundeleLess, Flex, Encore (webpack), Maker, PHP 7.1

Installation de SF 3.4

- installer Composer
- installer SF 3.4
- Arborescence des dossiers  et fichiers
- Lancement de l' settings_applications

1- Installer Composer

Composer est un outil de dépendance. Il permet de télécharger et mettre a jour tous les outils (services, composants, dépendances) dont nous aurons besoin

-DL: https://getcomposer.org/download/
cliquer sur le lien composer-Setup.extension

Installer: suivre les étapes

2- Installer SF
(doc symfony https://symfony.com/doc/current/index.html#gsc.tab=0)

Aller dans le dossier Symfony
Maj clic droit
Ouvrir une fenetre powershell ici
<cmd>Ligne de commande a ecrire
composer create-project symfony/framework-standard-edition test

Une fois terminé l' install, cliquer dix fois sur enter pour terminer l' install (bandeau vert qui apparait pour ok)
A ce stade, un dossier test a été crée

3- Arborescence des dossiers  et fichiers

- app/
     contient toute la configuration de l' app (bdd, securité, routes)
- bin/
     va contenir tous les executables de l' app ( de SF) 
- src/
     le dossier dans lequel on va coder notre MVC ( le plus important, celui dans lequel nous allons passer beaucoup de temps)
- var/
     Les fichiers ecrits par symfony au fur et a mesure ( on va y trouver le cache et les logs)
- tests/
     Les tests unitaires
- web/
     Repertoire web (app.php ou app_dev.php, img/css/js/fonts)
- vendor/
     Le coeur de SF (les fichiers codés par le studio de developpement)
- composer.json
     fichier qui contient la liste de toutes les dépendances dont on a besoin

4 - Lancement de l' application

Méthode 1:
localhost/back/symfony/test/web/app.php
localhost/back/symfony/test/web/app_dev.php

Methode 2
on va dans le dossier test
maj clic droit
<cmd>
php bin/console server:run localhost:8000
puis taper
localhost:8000
dans la barre URL du navigateur

Différence entre mode dev et prod
localhost/Symfony/test/web/toto
localhost:8000/toto

A ce stade, notre appli affiche un message de bienvenue, RAS

Etape 2: Les Bundles
Sommaire:
- Le concept des Bundles
- Création du premier Bundles

1 - le concept

Les bundles sont des briques/modules de notre application

UserBundle: => dossier
     UserController (C) => fichier .php
     UserModel (M) => fichier .php
     View : inscription/connexion/profil... => fichier .php

Avec la nouvelle version de symfony (4), il est préférable de créer un seul Bundle ( généralement appelé appBundle, aussi faisable sur la version 3)

2 - Creation du premier Bundle

On va créer un Bundle: POLES/TestBundle

<cmd>
php bin/console generate:bundle
faire y ensuite pour yes
<cmd>
POLES/TestBundle
puis triple Enter
Puis taper annotation ( a la place de xml)
=>création de plusieurs fichiers ( ne pas tenir compte du failed)

Le Bundle a été crée mais il faut l' enregister dans composer.json

Il faut ajouter
"POLES\\": "src/POLES"
en dessous de la ligne
"autoload": {
        "psr-4": {
            "AppBundle\\": "src/AppBundle",
            (ajouter une virgule a la fin)

Retourner sur la concole pour faire un
<cmd>
composer update

Notre bundle se localise dans src/POLES/TestBundle et il se compose de 4 dossiers:
     - Controller
          Tous les controllers du bundle
     - DependencyInjection
          Injection de dépendances
     - Resources
          Vues et Routes (YML) et éventuellement JS
     - Test
          Tests liés au fonctionnement du Bundle

A ca stade le Bundle est fonctionnel, mais petite erreur dans le navigateur a corriger
=> aller dans le dossier src/POLES/TestBundle/Controller/DefaultController.php
et remplacer cette ligne
return $this->render('POLESTestBundle:Default:index.html.twig');
par celle ci
return $this->render('@POLESTest/Default/index.html.twig');

=> Désormais, erreur disparue et affichage du message Hello World

Etape 3: Routes & controllers
Sommaire:
- Création de routes
- L' objet Request
- L' objet Response
- Redirection
- Message

1 - Création de Routes
("/") -> route simple homepage
    ("/bonjour/") -> route echo (erreur)
    ("/bonjour2/") -> route response
    ("/hello/{prenom}") -> route response + param URL
    ("/hola/{prenom}") -> route render de vue (html.twig) + param URL
    ("/ciao/{prenom}/{age}") -> route render de vue + 2 params URL
    ("/redirect/") -> route avec redirection (RedirectResponse)
    ("/redirect2/") -> route avec redirection (redirectToRoute())
    ("/message/") -> route avec redirect et message en session


2/ L'objet Request 
	<code>
	use Symfony\Component\HttpFoundation\Request;

	Correspond à la partie requete de la requête HTTP. 

	<code>
	$session = $request -> getSession(); 
	-> récupère la session ($_SESSION)

	Autres exemples : 
	<code>
	$session -> set('prenom', 'Yakine');
	echo $session -> get('prenom'); 

	Autre méthode :
	<code>
	$request -> session -> set('prenom', 'Yakine'); 

	
	Autres utilités de $request : 
	<code>
	$request -> query -> get('argument_url');
	$request -> request -> get('champs_form');
	$request -> cookies -> get('cookie');
	$request -> server -> get('server');
3 - L' objet Response

Correspond a la partie réponse de la requete http

<code>
use Symfony\Component\HttpFoundation\Response;

Toute action/fonction attend une réponse obligatoire
Même la fonction render est une réponse

return $this -> render();
return $this -> getTemplating() -> renderResponse
Ces deux lignes sont similaires, plutot privilégier la première comme elle est plus courte

4 - Redirection

Premiere Méthode

<code>
use Symfony\Component\HttpFoundation\RedirectResponse;

cf route ....."/redirect/" et "/redirect2/"

A ce stade, toutes nos routes doivent avoir un name

5 - Message

$session -> getFlashBag() -> add();

=> nous permet d' enregistrer des messages qui seront disponibles dans d' autres pages ( messages de' félicitations ou d' erreur)

app.session => permet en TWIG de récupérer les messagers les infos en session
app.user => nous permet, toujours en twig, de récupérer les infos de l' utilisateur actuellement connecté

Etape 4: création du site Boutique sur SF

Sommaire:

- creation du projets
- reorganiser le appbundle
- creation des premieres routes

1 - creation du projet

Dans le dossier symfony, maj clic droit
composer create-project symfony/framework-standard-edition Boutique3
cd Boutique3

php bin/console server:run

test : localhost:8000, a condition d' avoir fermé sa fenetre console de l' autre projet, sinon, il passe au port dispo suivant: 8001

